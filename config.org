#+TITLE: Configuration
#+AUTHOR: Zekun Shi
#+PROPERTY: header-args :emacs-lisp :tangle yes :comments link
#+STARTUP: org-startup-folded: showall
#+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t -*-
#+END_SRC

* AuthInfo
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Zekun Shi"
      user-mail-address "zekun@neuri.ai")
#+END_SRC

* Themes
Horizon themes need to swap background
#+BEGIN_SRC emacs-lisp
;; (setq doom-theme 'doom-solarized-light)
(setq doom-theme 'doom-horizon)
(after! solaire-mode (solaire-mode-swap-bg))
#+END_SRC

* Fonts
Nice condensed fonts.
#+BEGIN_SRC emacs-lisp
;; (setq doom-font (font-spec :family "Iosevka Term SS04" :size 16 :weight 'medium))
;; (setq doom-variable-pitch-font (font-spec :family "Iosevka SS04" :size 14))
(setq doom-font (font-spec :family "Iosevka Term SS04" :size 22 :weight 'medium))
(setq doom-variable-pitch-font (font-spec :family "Iosevka SS04" :size 18))
#+END_SRC

No line number.
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type nil)
#+END_SRC

Centered window mode
#+BEGIN_SRC emacs-lisp
;; (setq cwm-frame-internal-border 200)
;; (setq cwm-use-vertical-padding t)
#+END_SRC

* Spacemacs module
Add spacemacs-esque key-bindings.
#+BEGIN_SRC emacs-lisp
(setq doom-localleader-key ",")
(load! "~/.doom.d/modules/spacemacs/+spacemacs")
#+END_SRC

* Other modules
#+BEGIN_SRC emacs-lisp
(load! "secret")
(load! "+org")
(load! "+python")
(load! "+cpp")
(load! "+bindings")
#+END_SRC
** TODO get them into this file

* avy
#+BEGIN_SRC emacs-lisp
(setq avy-timeout-seconds 0.2)
#+END_SRC

* Extra file extension parsing
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.gin\\'" . conf-mode))
(add-to-list 'auto-mode-alist '("\\(/\\|\\`\\)[Dd]ockerfile" . dockerfile-mode))
#+END_SRC

* Julia
#+BEGIN_SRC emacs-lisp
(require 'lsp-julia)
#+END_SRC

* vterm
Make auto-complete visible
#+BEGIN_SRC emacs-lisp
(custom-set-faces! '(vterm-color-black :background "#839496"))
#+END_SRC

More scrollback
#+BEGIN_SRC emacs-lisp
(setq vterm-max-scrollback 100000)
#+END_SRC
* treemacs
Change default sorting.
#+BEGIN_SRC emacs-lisp
(after! treemacs (setq treemacs-sorting 'mod-time-desc))
#+END_SRC

* Spell checking
Make flyspell faster:
#+BEGIN_SRC emacs-lisp
(after! flyspell (require 'flyspell-lazy) (flyspell-lazy-mode 1))
(setq ispell-dictionary "en-custom")
(setq ispell-local-dictionary "en-custom")
(setq flyspell-default-dictionary "en-custom")
(setq default-buffer-file-coding-system 'no-conversion)

#+END_SRC

Use a custom English dictionary.
#+BEGIN_SRC emacs-lisp
(ispell-change-dictionary "en-custom")
#+END_SRC

* Extra color for Emacs's info-mode
#+BEGIN_SRC emacs-lisp
(use-package! info-colors
  :commands (info-colors-fontify-node))
(add-hook 'Info-selection-hook 'info-colors-fontify-node)
(add-hook 'Info-mode-hook #'mixed-pitch-mode)
#+END_SRC

* Calendar
#+BEGIN_SRC emacs-lisp
(defun my-open-calendar ()
  (interactive)
  (+workspace/new "Calendar" nil)
  (cfw:open-calendar-buffer
   :contents-sources
   (list
    (cfw:org-create-source "#09f7a0")  ; orgmode source
    (cfw:ical-create-source "gcal" my-gcal "IndianRed")))) ; google calendar ICS
#+END_SRC

* LaTeX
#+BEGIN_SRC emacs-lisp
(setq TeX-engine 'xetex)
(when EMACS28+
  (add-hook 'latex-mode-hook #'TeX-latex-mode))
#+END_SRC

* WebKit
#+BEGIN_SRC emacs-lisp
;; (setq +lookup-open-url-fn #'+lookup-xwidget-webkit-open-url-fn)
#+END_SRC

* tldr
tldr is an awesome cmd tool reference: [[https://github.com/tldr-pages/tldr][github]]

#+BEGIN_SRC emacs-lisp
(use-package! tldr
  :commands (tldr)
  :config
  (setq tldr-directory-path (concat doom-etc-dir "tldr/")))
#+END_SRC

* Send stuff to shell

#+BEGIN_SRC emacs-lisp
(defun sh-send-line-or-region (&optional step)
  (interactive ())
  (let ((proc (get-process "vterm"))
        pbuf min max command)
    (unless proc
      (let ((currbuff (current-buffer)))
        (shell)
        (switch-to-buffer currbuff)
        (setq proc (get-process "vterm"))
        ))
    (setq pbuff (process-buffer proc))
    (if (use-region-p)
        (setq min (region-beginning)
              max (region-end))
      (setq min (point-at-bol)
            max (point-at-eol)))
    (setq command (concat (buffer-substring min max) "\n"))
    (with-current-buffer pbuff
      (goto-char (process-mark proc))
      (insert command)
      (move-marker (process-mark proc) (point))
      ) ;;pop-to-buffer does not work with save-current-buffer -- bug?
    (process-send-string  proc command)
    (display-buffer (process-buffer proc) t)
    (when step
      (goto-char max)
      (next-line))
    ))

(defun sh-send-line-or-region-and-step ()
  (interactive)
  (sh-send-line-or-region t))
(defun sh-switch-to-process-buffer ()
  (interactive)
  (pop-to-buffer (process-buffer (get-process "vterm")) t))
#+END_SRC
