#+TITLE: Configuration
#+AUTHOR: Zekun Shi
#+PROPERTY: header-args :emacs-lisp :tangle yes :comments link
#+STARTUP: org-startup-folded: showall
#+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t -*-
#+END_SRC

* Auth Info
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Zekun Shi"
      user-mail-address "zekun@neuri.ai")
#+END_SRC

* Better Defaults

** Buffer default mode
Somehow this slow down start up time
#+BEGIN_SRC emacs-lisp
(general-auto-unbind-keys :off)
(remove-hook 'doom-after-init-modules-hook #'general-auto-unbind-keys)
;; (setq initial-major-mode 'emacs-lisp-mode)
#+END_SRC

** Shorten wait time
#+BEGIN_SRC emacs-lisp
(setq avy-timeout-seconds 0.2
      auto-revert-interval 0.5
      which-key-idle-delay 0.5)
#+END_SRC

** nested yasnippets
#+BEGIN_SRC emacs-lisp
(setq yas-triggers-in-field t)
#+END_SRC

** Tramp
*** copy size limit
#+BEGIN_SRC emacs-lisp
(setq tramp-copy-size-limit nil)
#+END_SRC
*** faster
#+begin_src emacs-lisp
(setq remote-file-name-inhibit-cache nil)
(setq vc-ignore-dir-regexp
      (format "%s\\|%s"
              vc-ignore-dir-regexp
              tramp-file-name-regexp))
(setq tramp-verbose 1)
#+end_src

* Visual Settings

** Themes
Horizon themes need to swap background
#+BEGIN_SRC emacs-lisp
;; (load! "~/.doom.d/themes/zaiste-emacs-theme/zaiste-theme.el")
;; (setq doom-theme 'doom-solarized-light)
;; (setq doom-theme 'doom-horizon)
(setq doom-theme 'doom-flatwhite)
;; (setq doom-theme 'doom-laserwave)
;; (setq doom-theme 'doom-spacegrey)
;; (setq solaire-mode-auto-swap-bg nil)
(setq solaire-mode-auto-swap-bg t)
#+END_SRC

** Fonts
Nice condensed fonts.
#+BEGIN_SRC emacs-lisp
;; (setq doom-font (font-spec :family "Iosevka Term SS04" :size 16 :weight 'medium))
;; (setq doom-variable-pitch-font (font-spec :family "Iosevka" :size 14))

;; (setq doom-font (font-spec :family "Iosevka Term SS04" :size 22 :weight 'medium))
;; (setq doom-variable-pitch-font (font-spec :family "Iosevka" :size 18))

;; (setq doom-font (font-spec :family "Iosevka Term" :size 22 :weight 'medium))
;; (setq doom-variable-pitch-font (font-spec :family "Iosevka" :size 18))

(setq doom-font (font-spec :family "Iosevka Term SS04" :size 32 :weight 'medium))
(setq doom-variable-pitch-font (font-spec :family "Iosevka" :size 28))

;; (setq doom-font (font-spec :family "Iosevka Term" :size 22 :weight 'medium))
;; (setq doom-variable-pitch-font (font-spec :family "Iosevka" :size 18))

;; (setq doom-variable-pitch-font (font-spec :family "Overpass" :size 28))

;; (setq doom-font (font-spec :family "Iosevka Term" :size 16 :weight 'medium))
;; (setq doom-variable-pitch-font (font-spec :family "Iosevka" :size 14))

;; (setq doom-font (font-spec :family "Iosevka Term Slab" :size 22 :weight 'medium))
;; (setq doom-variable-pitch-font (font-spec :family "Iosevka Slab" :size 18))

;; (setq doom-font (font-spec :family "Operator Mono" :size 22 :weight 'light))
;; (setq doom-variable-pitch-font (font-spec :family "Operator Mono" :size 18))

;; (setq doom-font (font-spec :family "IBM Plex Mono" :size 18 :weight 'regular))
;; (setq doom-variable-pitch-font (font-spec :family "IBM Plex Sans" :size 14))

;; (setq doom-font (font-spec :family "IBM Plex Mono" :size 14 :weight 'regular))
;; (setq doom-variable-pitch-font (font-spec :family "IBM Plex Sans" :size 10))

#+END_SRC

** Line number
No line number.
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type nil)
#+END_SRC

** Centred window mode
I want to achieve the look like writeroom where top and bottom margins are large, but it's tricky.
#+BEGIN_SRC emacs-lisp
(setq cwm-frame-internal-border 200)
(setq cwm-use-vertical-padding t)
#+END_SRC

** Modeline
Hide file encoding if it's the default.
#+BEGIN_SRC emacs-lisp
(defun doom-modeline-conditional-buffer-encoding ()
  "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
  (setq-local doom-modeline-buffer-encoding
              (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                          (eq buffer-file-coding-system 'utf-8)))))

(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
#+END_SRC

** treemacs
Change default sorting.
#+BEGIN_SRC emacs-lisp
(after! treemacs (setq treemacs-sorting 'mod-time-desc))
#+END_SRC

** Splash Screen
# #+BEGIN_SRC emacs-lisp
# (defvar fancy-splash-image-template
#   (expand-file-name "misc/splash-images/blackhole-lines-template.svg" doom-private-dir)
#   "Default template svg used for the splash image, with substitutions from ")
# (defvar fancy-splash-image-nil
#   (expand-file-name "misc/splash-images/transparent-pixel.png" doom-private-dir)
#   "An image to use at minimum size, usually a transparent pixel")

# (setq fancy-splash-sizes
#   `((:height 500 :min-height 50 :padding (0 . 4) :template ,(expand-file-name "misc/splash-images/blackhole-lines-0.svg" doom-private-dir))
#     (:height 440 :min-height 42 :padding (1 . 4) :template ,(expand-file-name "misc/splash-images/blackhole-lines-0.svg" doom-private-dir))
#     (:height 400 :min-height 38 :padding (1 . 4) :template ,(expand-file-name "misc/splash-images/blackhole-lines-1.svg" doom-private-dir))
#     (:height 350 :min-height 36 :padding (1 . 3) :template ,(expand-file-name "misc/splash-images/blackhole-lines-2.svg" doom-private-dir))
#     (:height 300 :min-height 34 :padding (1 . 3) :template ,(expand-file-name "misc/splash-images/blackhole-lines-3.svg" doom-private-dir))
#     (:height 250 :min-height 32 :padding (1 . 2) :template ,(expand-file-name "misc/splash-images/blackhole-lines-4.svg" doom-private-dir))
#     (:height 200 :min-height 30 :padding (1 . 2) :template ,(expand-file-name "misc/splash-images/blackhole-lines-5.svg" doom-private-dir))
#     (:height 100 :min-height 24 :padding (1 . 2) :template ,(expand-file-name "misc/splash-images/emacs-e-template.svg" doom-private-dir))
#     (:height 0   :min-height 0  :padding (0 . 0) :file ,fancy-splash-image-nil)))

# (defvar fancy-splash-sizes
#   `((:height 500 :min-height 50 :padding (0 . 2))
#     (:height 440 :min-height 42 :padding (1 . 4))
#     (:height 330 :min-height 35 :padding (1 . 3))
#     (:height 200 :min-height 30 :padding (1 . 2))
#     (:height 0   :min-height 0  :padding (0 . 0) :file ,fancy-splash-image-nil))
#   "list of plists with the following properties
#   :height the height of the image
#   :min-height minimum `frame-height' for image
#   :padding `+doom-dashboard-banner-padding' to apply
#   :template non-default template file
#   :file file to use instead of template")

# (defvar fancy-splash-template-colours
#   '(("$colour1" . keywords) ("$colour2" . type) ("$colour3" . base5) ("$colour4" . base8))
#   "list of colour-replacement alists of the form (\"$placeholder\" . 'theme-colour) which applied the template")

# (unless (file-exists-p (expand-file-name "theme-splashes" doom-cache-dir))
#   (make-directory (expand-file-name "theme-splashes" doom-cache-dir) t))

# (defun fancy-splash-filename (theme-name height)
#   (expand-file-name (concat (file-name-as-directory "theme-splashes")
#                             (symbol-name doom-theme)
#                             "-" (number-to-string height) ".svg")
#                     doom-cache-dir))

# (defun fancy-splash-clear-cache ()
#   "Delete all cached fancy splash images"
#   (interactive)
#   (delete-directory (expand-file-name "theme-splashes" doom-cache-dir) t)
#   (message "Cache cleared!"))

# (defun fancy-splash-generate-image (template height)
#   "Read TEMPLATE and create an image if HEIGHT with colour substitutions as  ;described by `fancy-splash-template-colours' for the current theme"
#     (with-temp-buffer
#       (insert-file-contents template)
#       (re-search-forward "$height" nil t)
#       (replace-match (number-to-string height) nil nil)
#       (dolist (substitution fancy-splash-template-colours)
#         (beginning-of-buffer)
#         (while (re-search-forward (car substitution) nil t)
#           (replace-match (doom-color (cdr substitution)) nil nil)))
#       (write-region nil nil
#                     (fancy-splash-filename (symbol-name doom-theme) height) nil nil)))

# (defun fancy-splash-generate-images ()
#   "Perform `fancy-splash-generate-image' in bulk"
#   (dolist (size fancy-splash-sizes)
#     (unless (plist-get size :file)
#       (fancy-splash-generate-image (or (plist-get size :file)
#                                        (plist-get size :template)
#                                        fancy-splash-image-template)
#                                    (plist-get size :height)))))

# (defun ensure-theme-splash-images-exist (&optional height)
#   (unless (file-exists-p (fancy-splash-filename
#                           (symbol-name doom-theme)
#                           (or height
#                               (plist-get (car fancy-splash-sizes) :height))))
#     (fancy-splash-generate-images)))

# (defun get-appropriate-splash ()
#   (let ((height (frame-height)))
#     (cl-some (lambda (size) (when (>= height (plist-get size :min-height)) size))
#              fancy-splash-sizes)))

# (setq fancy-splash-last-size nil)
# (setq fancy-splash-last-theme nil)
# (defun set-appropriate-splash (&optional frame)
#   (let ((appropriate-image (get-appropriate-splash)))
#     (unless (and (equal appropriate-image fancy-splash-last-size)
#                  (equal doom-theme fancy-splash-last-theme)))
#     (unless (plist-get appropriate-image :file)
#       (ensure-theme-splash-images-exist (plist-get appropriate-image :height)))
#     (setq fancy-splash-image
#           (or (plist-get appropriate-image :file)
#               (fancy-splash-filename (symbol-name doom-theme) (plist-get appropriate-image :height))))
#     (setq +doom-dashboard-banner-padding (plist-get appropriate-image :padding))
#     (setq fancy-splash-last-size appropriate-image)
#     (setq fancy-splash-last-theme doom-theme)
#     (+doom-dashboard-reload)))

# (add-hook 'window-size-change-functions #'set-appropriate-splash)
# (add-hook 'doom-load-theme-hook #'set-appropriate-splash)
# #+END_SRC


** Extra color for Emacs's info-mode
#+BEGIN_SRC emacs-lisp
(use-package! info-colors
  :commands (info-colors-fontify-node))
(add-hook 'Info-selection-hook 'info-colors-fontify-node)
(add-hook 'Info-mode-hook #'mixed-pitch-mode)
#+END_SRC

* Improvement

** Open large file
loads large files in chunks
#+BEGIN_SRC emacs-lisp
(use-package! vlf-setup
  :defer-incrementally vlf-tune vlf-base vlf-write vlf-search vlf-occur vlf-follow vlf-ediff vlf)
#+END_SRC

* Spacemacs emulation
Add spacemacs-esque key-bindings.
#+BEGIN_SRC emacs-lisp
(load! "~/.doom.d/modules/private/spacemacs/config")
(setq doom-localleader-key ",")
#+END_SRC

* Other modules
#+BEGIN_SRC emacs-lisp
(load! "secret")
(load! "+org")
(load! "+python")
(load! "+cpp")
(load! "+bindings")
#+END_SRC
** TODO get them into this file

* Extra file extension parsing
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.gin\\'" . conf-mode))
(add-to-list 'auto-mode-alist '("\\(/\\|\\`\\)[Dd]ockerfile" . dockerfile-mode))
(add-to-list 'auto-mode-alist '("\\.shader\\'" . glsl-mode))
#+END_SRC

* Language specific settings

** Julia
#+BEGIN_SRC emacs-lisp
(straight-use-package 'eglot-jl)
(set-popup-rule! "^\\*julia.*\\*$"  :size 0.5 :side 'right :slot 1 :ttl nil :select nil :modeline nil :quit nil)
;; (require 'lsp-julia)
;; (add-hook 'julia-mode-hook
;;   '(progn
;;     (eglot-jl-init)
;;     (eglot)))
#+END_SRC

** C/C++
#+BEGIN_SRC emacs-lisp
(setq disaster-cxxflags "-std=c++17")
#+END_SRC

** LaTeX

*** Tex engine
#+BEGIN_SRC emacs-lisp
(setq TeX-engine 'xetex)
(when EMACS28+
  (add-hook 'latex-mode-hook #'TeX-latex-mode))
(setq lsp-tex-server 'digestif)
#+END_SRC

*** auto latex snippets
this is awesome!
#+BEGIN_SRC emacs-lisp
(use-package aas
  :hook (LaTeX-mode . ass-activate-for-major-mode)
  :hook (org-mode . ass-activate-for-major-mode)
  )
(use-package! laas
  :hook (LaTeX-mode . laas-mode)
  :config ; do whatever here
  (aas-set-snippets 'laas-mode
                    ;; set condition!
                    :cond #'texmathp ; expand only while in math
                    "supp" "\\supp"
                    "On" "O(n)"
                    "O1" "O(1)"
                    "Olog" "O(\\log n)"
                    "Olon" "O(n \\log n)"
                    "Span" (lambda () (interactive)
                             (yas-expand-snippet "\\Span($1)$0"))))
#+END_SRC

*** pdf should auto revert
#+BEGIN_SRC emacs-lisp
(add-hook 'pdf-view-mode-hook 'auto-revert-mode)
#+END_SRC

* vterm
Make auto-complete visible
#+BEGIN_SRC emacs-lisp
(setq shell-file-name "/bin/zsh")
(custom-set-faces! '(vterm-color-black :background "#839496"))
#+END_SRC

More scroll back
#+BEGIN_SRC emacs-lisp
(setq vterm-max-scrollback 100000)
#+END_SRC

* Spell checking
Make flyspell faster:
#+BEGIN_SRC emacs-lisp
;; (setq ispell-dictionary "en-custom")
;; (setq ispell-local-dictionary "en-custom")
;; (setq flyspell-default-dictionary "en-custom")
;; (setq default-buffer-file-coding-system 'no-conversion)
#+END_SRC

Use a custom English dictionary.
#+BEGIN_SRC emacs-lisp
;; (ispell-change-dictionary "en-custom")
#+END_SRC

* Calendar
#+BEGIN_SRC emacs-lisp
(defun my-open-calendar ()
  (interactive)
  (+workspace/new "Calendar" nil)
  (cfw:open-calendar-buffer
   :contents-sources
   (list
    (cfw:org-create-source "steel blue")  ; orgmode source
    (cfw:ical-create-source "gcal" sail-gcal "sea green")
    (cfw:ical-create-source "gcal" my-gcal "IndianRed")))) ; google calendar ICS
#+END_SRC

* WebKit
#+BEGIN_SRC emacs-lisp
;; (setq +lookup-open-url-fn #'+lookup-xwidget-webkit-open-url-fn)
#+END_SRC

* tldr
tldr is an awesome cmd tool reference: [[https://github.com/tldr-pages/tldr][github]]

#+BEGIN_SRC emacs-lisp
(use-package! tldr
  :commands (tldr)
  :config
  (setq tldr-directory-path (concat doom-etc-dir "tldr/")))
#+END_SRC

* Send stuff to shell

#+BEGIN_SRC emacs-lisp
(defun sh-send-line-or-region (&optional step)
  (interactive ())
  (let ((proc (get-process "vterm"))
        pbuf min max command)
    (unless proc
      (let ((currbuff (current-buffer)))
        (shell)
        (switch-to-buffer currbuff)
        (setq proc (get-process "vterm"))
        ))
    (setq pbuff (process-buffer proc))
    (if (use-region-p)
        (setq min (region-beginning)
              max (region-end))
      (setq min (point-at-bol)
            max (point-at-eol)))
    (setq command (concat (buffer-substring min max) "\n"))
    (with-current-buffer pbuff
      (goto-char (process-mark proc))
      (insert command)
      (move-marker (process-mark proc) (point))
      ) ;;pop-to-buffer does not work with save-current-buffer -- bug?
    (process-send-string  proc command)
    (display-buffer (process-buffer proc) t)
    (when step
      (goto-char max)
      (next-line))
    ))

(defun sh-send-line-or-region-and-step ()
  (interactive)
  (sh-send-line-or-region t))
(defun sh-switch-to-process-buffer ()
  (interactive)
  (pop-to-buffer (process-buffer (get-process "vterm")) t))
#+END_SRC
